program     = statement* EOF ;

(* Declarations *)
declaration = classDecl | funDecl | varDecl | statement;
classDecl   = "class" IDENTIFIER "{" function* "}" ;
varDecl     = "var" IDENTIFIER ( "=" expression )? ";" ;
funDecl     = "fun" function ;
function    = IDENTIFIER "(" parameters? ")" block ;
parameters  = IDENTIFIER ( "," IDENTIFIER )* ;

(* Statements *)
statement   = exprStmt
            | forStmt
            | ifStmt
            | printStmt
            | returnStmt
            | whileStmt
            | block ;
exprStmt    = expression ";" ;
ifStmt      = "if" "(" expression ")" statement ( "else" statement )? ;
printStmt   = "print" expression ";" ;
returnStmt  = "return" expression? ";" ;
whileStmt   = "while" "(" expression ")" statement ;
forStmt     = "for" "(" ( varDecl | exprStmt | ";" )
              expression? ";"
              expression? ")" statement ;
block       = "{" declaration* "}";

(* Expressions *)
expression  = assignment ;
assignment  = ( call "." )? IDENTIFIER "=" assignment
            | logicOr ;
logicOr     = logicAnd ( "or" logicAnd )* ;
logicAnd    = equality ( "and" equality )* ;
equality    = comparison ( ( "!=" | "==" ) comparison )* ;
comparison  = term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        = factor ( ( "-" | "+" ) factor )* ;
factor      = unary ( ( "/" | "*" ) unary )* ;
unary       = ( "!" | "-" ) unary
            | call ;
call        = primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
arguments   = expression ( "," expression )* ;
primary     = NUMBER | STRING
            | "true" | "false" | "nil" | "this"
            | "(" expression ")"
            | IDENTIFIER ;